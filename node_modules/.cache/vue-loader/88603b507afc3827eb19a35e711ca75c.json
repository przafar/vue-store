{"remainingRequest":"C:\\Zafar\\VueJs\\vue-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Zafar\\VueJs\\vue-store\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Zafar\\VueJs\\vue-store\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Zafar\\VueJs\\vue-store\\src\\components\\ModalSearch.vue?vue&type=template&id=5648b235&scoped=true&","dependencies":[{"path":"C:\\Zafar\\VueJs\\vue-store\\src\\components\\ModalSearch.vue","mtime":1592257249467},{"path":"C:\\Zafar\\VueJs\\vue-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Zafar\\VueJs\\vue-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Zafar\\VueJs\\vue-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Zafar\\VueJs\\vue-store\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}